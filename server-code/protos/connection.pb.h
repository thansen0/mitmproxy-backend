// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: connection.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_connection_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_connection_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_connection_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_connection_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_connection_2eproto;
class ConnectionInit;
class ConnectionInitDefaultTypeInternal;
extern ConnectionInitDefaultTypeInternal _ConnectionInit_default_instance_;
class ConnectionResp;
class ConnectionRespDefaultTypeInternal;
extern ConnectionRespDefaultTypeInternal _ConnectionResp_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ConnectionInit* Arena::CreateMaybeMessage<::ConnectionInit>(Arena*);
template<> ::ConnectionResp* Arena::CreateMaybeMessage<::ConnectionResp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ConnectionInit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConnectionInit) */ {
 public:
  inline ConnectionInit() : ConnectionInit(nullptr) {};
  virtual ~ConnectionInit();

  ConnectionInit(const ConnectionInit& from);
  ConnectionInit(ConnectionInit&& from) noexcept
    : ConnectionInit() {
    *this = ::std::move(from);
  }

  inline ConnectionInit& operator=(const ConnectionInit& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectionInit& operator=(ConnectionInit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnectionInit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectionInit* internal_default_instance() {
    return reinterpret_cast<const ConnectionInit*>(
               &_ConnectionInit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConnectionInit& a, ConnectionInit& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectionInit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectionInit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnectionInit* New() const final {
    return CreateMaybeMessage<ConnectionInit>(nullptr);
  }

  ConnectionInit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectionInit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnectionInit& from);
  void MergeFrom(const ConnectionInit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectionInit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConnectionInit";
  }
  protected:
  explicit ConnectionInit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_connection_2eproto);
    return ::descriptor_table_connection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 1,
    kClientPubKeyFieldNumber = 2,
    kAccessTokenFieldNumber = 3,
    kDeviceIdFieldNumber = 4,
  };
  // string email = 1;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_email();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_email(
      std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string clientPubKey = 2;
  void clear_clientpubkey();
  const std::string& clientpubkey() const;
  void set_clientpubkey(const std::string& value);
  void set_clientpubkey(std::string&& value);
  void set_clientpubkey(const char* value);
  void set_clientpubkey(const char* value, size_t size);
  std::string* mutable_clientpubkey();
  std::string* release_clientpubkey();
  void set_allocated_clientpubkey(std::string* clientpubkey);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_clientpubkey();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_clientpubkey(
      std::string* clientpubkey);
  private:
  const std::string& _internal_clientpubkey() const;
  void _internal_set_clientpubkey(const std::string& value);
  std::string* _internal_mutable_clientpubkey();
  public:

  // string accessToken = 3;
  void clear_accesstoken();
  const std::string& accesstoken() const;
  void set_accesstoken(const std::string& value);
  void set_accesstoken(std::string&& value);
  void set_accesstoken(const char* value);
  void set_accesstoken(const char* value, size_t size);
  std::string* mutable_accesstoken();
  std::string* release_accesstoken();
  void set_allocated_accesstoken(std::string* accesstoken);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_accesstoken();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_accesstoken(
      std::string* accesstoken);
  private:
  const std::string& _internal_accesstoken() const;
  void _internal_set_accesstoken(const std::string& value);
  std::string* _internal_mutable_accesstoken();
  public:

  // string deviceId = 4;
  void clear_deviceid();
  const std::string& deviceid() const;
  void set_deviceid(const std::string& value);
  void set_deviceid(std::string&& value);
  void set_deviceid(const char* value);
  void set_deviceid(const char* value, size_t size);
  std::string* mutable_deviceid();
  std::string* release_deviceid();
  void set_allocated_deviceid(std::string* deviceid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_deviceid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_deviceid(
      std::string* deviceid);
  private:
  const std::string& _internal_deviceid() const;
  void _internal_set_deviceid(const std::string& value);
  std::string* _internal_mutable_deviceid();
  public:

  // @@protoc_insertion_point(class_scope:ConnectionInit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientpubkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accesstoken_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_connection_2eproto;
};
// -------------------------------------------------------------------

class ConnectionResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConnectionResp) */ {
 public:
  inline ConnectionResp() : ConnectionResp(nullptr) {};
  virtual ~ConnectionResp();

  ConnectionResp(const ConnectionResp& from);
  ConnectionResp(ConnectionResp&& from) noexcept
    : ConnectionResp() {
    *this = ::std::move(from);
  }

  inline ConnectionResp& operator=(const ConnectionResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectionResp& operator=(ConnectionResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnectionResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectionResp* internal_default_instance() {
    return reinterpret_cast<const ConnectionResp*>(
               &_ConnectionResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ConnectionResp& a, ConnectionResp& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectionResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectionResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnectionResp* New() const final {
    return CreateMaybeMessage<ConnectionResp>(nullptr);
  }

  ConnectionResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectionResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnectionResp& from);
  void MergeFrom(const ConnectionResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectionResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConnectionResp";
  }
  protected:
  explicit ConnectionResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_connection_2eproto);
    return ::descriptor_table_connection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 1,
    kServerPubKeyFieldNumber = 2,
    kServerIPAddrFieldNumber = 4,
    kCertificateFileCrtFieldNumber = 5,
    kPortNumberFieldNumber = 3,
  };
  // string email = 1;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_email();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_email(
      std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string serverPubKey = 2;
  void clear_serverpubkey();
  const std::string& serverpubkey() const;
  void set_serverpubkey(const std::string& value);
  void set_serverpubkey(std::string&& value);
  void set_serverpubkey(const char* value);
  void set_serverpubkey(const char* value, size_t size);
  std::string* mutable_serverpubkey();
  std::string* release_serverpubkey();
  void set_allocated_serverpubkey(std::string* serverpubkey);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_serverpubkey();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_serverpubkey(
      std::string* serverpubkey);
  private:
  const std::string& _internal_serverpubkey() const;
  void _internal_set_serverpubkey(const std::string& value);
  std::string* _internal_mutable_serverpubkey();
  public:

  // string serverIPAddr = 4;
  void clear_serveripaddr();
  const std::string& serveripaddr() const;
  void set_serveripaddr(const std::string& value);
  void set_serveripaddr(std::string&& value);
  void set_serveripaddr(const char* value);
  void set_serveripaddr(const char* value, size_t size);
  std::string* mutable_serveripaddr();
  std::string* release_serveripaddr();
  void set_allocated_serveripaddr(std::string* serveripaddr);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_serveripaddr();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_serveripaddr(
      std::string* serveripaddr);
  private:
  const std::string& _internal_serveripaddr() const;
  void _internal_set_serveripaddr(const std::string& value);
  std::string* _internal_mutable_serveripaddr();
  public:

  // bytes certificateFileCrt = 5;
  void clear_certificatefilecrt();
  const std::string& certificatefilecrt() const;
  void set_certificatefilecrt(const std::string& value);
  void set_certificatefilecrt(std::string&& value);
  void set_certificatefilecrt(const char* value);
  void set_certificatefilecrt(const void* value, size_t size);
  std::string* mutable_certificatefilecrt();
  std::string* release_certificatefilecrt();
  void set_allocated_certificatefilecrt(std::string* certificatefilecrt);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_certificatefilecrt();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_certificatefilecrt(
      std::string* certificatefilecrt);
  private:
  const std::string& _internal_certificatefilecrt() const;
  void _internal_set_certificatefilecrt(const std::string& value);
  std::string* _internal_mutable_certificatefilecrt();
  public:

  // int32 portNumber = 3;
  void clear_portnumber();
  ::PROTOBUF_NAMESPACE_ID::int32 portnumber() const;
  void set_portnumber(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_portnumber() const;
  void _internal_set_portnumber(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ConnectionResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serverpubkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serveripaddr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr certificatefilecrt_;
  ::PROTOBUF_NAMESPACE_ID::int32 portnumber_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_connection_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConnectionInit

// string email = 1;
inline void ConnectionInit::clear_email() {
  email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConnectionInit::email() const {
  // @@protoc_insertion_point(field_get:ConnectionInit.email)
  return _internal_email();
}
inline void ConnectionInit::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:ConnectionInit.email)
}
inline std::string* ConnectionInit::mutable_email() {
  // @@protoc_insertion_point(field_mutable:ConnectionInit.email)
  return _internal_mutable_email();
}
inline const std::string& ConnectionInit::_internal_email() const {
  return email_.Get();
}
inline void ConnectionInit::_internal_set_email(const std::string& value) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConnectionInit::set_email(std::string&& value) {
  
  email_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ConnectionInit.email)
}
inline void ConnectionInit::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ConnectionInit.email)
}
inline void ConnectionInit::set_email(const char* value,
    size_t size) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ConnectionInit.email)
}
inline std::string* ConnectionInit::_internal_mutable_email() {
  
  return email_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConnectionInit::release_email() {
  // @@protoc_insertion_point(field_release:ConnectionInit.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConnectionInit::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ConnectionInit.email)
}
inline std::string* ConnectionInit::unsafe_arena_release_email() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ConnectionInit.email)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return email_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ConnectionInit::unsafe_arena_set_allocated_email(
    std::string* email) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (email != nullptr) {
    
  } else {
    
  }
  email_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      email, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ConnectionInit.email)
}

// string clientPubKey = 2;
inline void ConnectionInit::clear_clientpubkey() {
  clientpubkey_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConnectionInit::clientpubkey() const {
  // @@protoc_insertion_point(field_get:ConnectionInit.clientPubKey)
  return _internal_clientpubkey();
}
inline void ConnectionInit::set_clientpubkey(const std::string& value) {
  _internal_set_clientpubkey(value);
  // @@protoc_insertion_point(field_set:ConnectionInit.clientPubKey)
}
inline std::string* ConnectionInit::mutable_clientpubkey() {
  // @@protoc_insertion_point(field_mutable:ConnectionInit.clientPubKey)
  return _internal_mutable_clientpubkey();
}
inline const std::string& ConnectionInit::_internal_clientpubkey() const {
  return clientpubkey_.Get();
}
inline void ConnectionInit::_internal_set_clientpubkey(const std::string& value) {
  
  clientpubkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConnectionInit::set_clientpubkey(std::string&& value) {
  
  clientpubkey_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ConnectionInit.clientPubKey)
}
inline void ConnectionInit::set_clientpubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clientpubkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ConnectionInit.clientPubKey)
}
inline void ConnectionInit::set_clientpubkey(const char* value,
    size_t size) {
  
  clientpubkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ConnectionInit.clientPubKey)
}
inline std::string* ConnectionInit::_internal_mutable_clientpubkey() {
  
  return clientpubkey_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConnectionInit::release_clientpubkey() {
  // @@protoc_insertion_point(field_release:ConnectionInit.clientPubKey)
  return clientpubkey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConnectionInit::set_allocated_clientpubkey(std::string* clientpubkey) {
  if (clientpubkey != nullptr) {
    
  } else {
    
  }
  clientpubkey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientpubkey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ConnectionInit.clientPubKey)
}
inline std::string* ConnectionInit::unsafe_arena_release_clientpubkey() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ConnectionInit.clientPubKey)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return clientpubkey_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ConnectionInit::unsafe_arena_set_allocated_clientpubkey(
    std::string* clientpubkey) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (clientpubkey != nullptr) {
    
  } else {
    
  }
  clientpubkey_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      clientpubkey, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ConnectionInit.clientPubKey)
}

// string accessToken = 3;
inline void ConnectionInit::clear_accesstoken() {
  accesstoken_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConnectionInit::accesstoken() const {
  // @@protoc_insertion_point(field_get:ConnectionInit.accessToken)
  return _internal_accesstoken();
}
inline void ConnectionInit::set_accesstoken(const std::string& value) {
  _internal_set_accesstoken(value);
  // @@protoc_insertion_point(field_set:ConnectionInit.accessToken)
}
inline std::string* ConnectionInit::mutable_accesstoken() {
  // @@protoc_insertion_point(field_mutable:ConnectionInit.accessToken)
  return _internal_mutable_accesstoken();
}
inline const std::string& ConnectionInit::_internal_accesstoken() const {
  return accesstoken_.Get();
}
inline void ConnectionInit::_internal_set_accesstoken(const std::string& value) {
  
  accesstoken_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConnectionInit::set_accesstoken(std::string&& value) {
  
  accesstoken_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ConnectionInit.accessToken)
}
inline void ConnectionInit::set_accesstoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  accesstoken_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ConnectionInit.accessToken)
}
inline void ConnectionInit::set_accesstoken(const char* value,
    size_t size) {
  
  accesstoken_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ConnectionInit.accessToken)
}
inline std::string* ConnectionInit::_internal_mutable_accesstoken() {
  
  return accesstoken_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConnectionInit::release_accesstoken() {
  // @@protoc_insertion_point(field_release:ConnectionInit.accessToken)
  return accesstoken_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConnectionInit::set_allocated_accesstoken(std::string* accesstoken) {
  if (accesstoken != nullptr) {
    
  } else {
    
  }
  accesstoken_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), accesstoken,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ConnectionInit.accessToken)
}
inline std::string* ConnectionInit::unsafe_arena_release_accesstoken() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ConnectionInit.accessToken)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return accesstoken_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ConnectionInit::unsafe_arena_set_allocated_accesstoken(
    std::string* accesstoken) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (accesstoken != nullptr) {
    
  } else {
    
  }
  accesstoken_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      accesstoken, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ConnectionInit.accessToken)
}

// string deviceId = 4;
inline void ConnectionInit::clear_deviceid() {
  deviceid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConnectionInit::deviceid() const {
  // @@protoc_insertion_point(field_get:ConnectionInit.deviceId)
  return _internal_deviceid();
}
inline void ConnectionInit::set_deviceid(const std::string& value) {
  _internal_set_deviceid(value);
  // @@protoc_insertion_point(field_set:ConnectionInit.deviceId)
}
inline std::string* ConnectionInit::mutable_deviceid() {
  // @@protoc_insertion_point(field_mutable:ConnectionInit.deviceId)
  return _internal_mutable_deviceid();
}
inline const std::string& ConnectionInit::_internal_deviceid() const {
  return deviceid_.Get();
}
inline void ConnectionInit::_internal_set_deviceid(const std::string& value) {
  
  deviceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConnectionInit::set_deviceid(std::string&& value) {
  
  deviceid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ConnectionInit.deviceId)
}
inline void ConnectionInit::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deviceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ConnectionInit.deviceId)
}
inline void ConnectionInit::set_deviceid(const char* value,
    size_t size) {
  
  deviceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ConnectionInit.deviceId)
}
inline std::string* ConnectionInit::_internal_mutable_deviceid() {
  
  return deviceid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConnectionInit::release_deviceid() {
  // @@protoc_insertion_point(field_release:ConnectionInit.deviceId)
  return deviceid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConnectionInit::set_allocated_deviceid(std::string* deviceid) {
  if (deviceid != nullptr) {
    
  } else {
    
  }
  deviceid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deviceid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ConnectionInit.deviceId)
}
inline std::string* ConnectionInit::unsafe_arena_release_deviceid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ConnectionInit.deviceId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return deviceid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ConnectionInit::unsafe_arena_set_allocated_deviceid(
    std::string* deviceid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (deviceid != nullptr) {
    
  } else {
    
  }
  deviceid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      deviceid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ConnectionInit.deviceId)
}

// -------------------------------------------------------------------

// ConnectionResp

// string email = 1;
inline void ConnectionResp::clear_email() {
  email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConnectionResp::email() const {
  // @@protoc_insertion_point(field_get:ConnectionResp.email)
  return _internal_email();
}
inline void ConnectionResp::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:ConnectionResp.email)
}
inline std::string* ConnectionResp::mutable_email() {
  // @@protoc_insertion_point(field_mutable:ConnectionResp.email)
  return _internal_mutable_email();
}
inline const std::string& ConnectionResp::_internal_email() const {
  return email_.Get();
}
inline void ConnectionResp::_internal_set_email(const std::string& value) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConnectionResp::set_email(std::string&& value) {
  
  email_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ConnectionResp.email)
}
inline void ConnectionResp::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ConnectionResp.email)
}
inline void ConnectionResp::set_email(const char* value,
    size_t size) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ConnectionResp.email)
}
inline std::string* ConnectionResp::_internal_mutable_email() {
  
  return email_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConnectionResp::release_email() {
  // @@protoc_insertion_point(field_release:ConnectionResp.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConnectionResp::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ConnectionResp.email)
}
inline std::string* ConnectionResp::unsafe_arena_release_email() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ConnectionResp.email)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return email_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ConnectionResp::unsafe_arena_set_allocated_email(
    std::string* email) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (email != nullptr) {
    
  } else {
    
  }
  email_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      email, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ConnectionResp.email)
}

// string serverPubKey = 2;
inline void ConnectionResp::clear_serverpubkey() {
  serverpubkey_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConnectionResp::serverpubkey() const {
  // @@protoc_insertion_point(field_get:ConnectionResp.serverPubKey)
  return _internal_serverpubkey();
}
inline void ConnectionResp::set_serverpubkey(const std::string& value) {
  _internal_set_serverpubkey(value);
  // @@protoc_insertion_point(field_set:ConnectionResp.serverPubKey)
}
inline std::string* ConnectionResp::mutable_serverpubkey() {
  // @@protoc_insertion_point(field_mutable:ConnectionResp.serverPubKey)
  return _internal_mutable_serverpubkey();
}
inline const std::string& ConnectionResp::_internal_serverpubkey() const {
  return serverpubkey_.Get();
}
inline void ConnectionResp::_internal_set_serverpubkey(const std::string& value) {
  
  serverpubkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConnectionResp::set_serverpubkey(std::string&& value) {
  
  serverpubkey_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ConnectionResp.serverPubKey)
}
inline void ConnectionResp::set_serverpubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serverpubkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ConnectionResp.serverPubKey)
}
inline void ConnectionResp::set_serverpubkey(const char* value,
    size_t size) {
  
  serverpubkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ConnectionResp.serverPubKey)
}
inline std::string* ConnectionResp::_internal_mutable_serverpubkey() {
  
  return serverpubkey_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConnectionResp::release_serverpubkey() {
  // @@protoc_insertion_point(field_release:ConnectionResp.serverPubKey)
  return serverpubkey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConnectionResp::set_allocated_serverpubkey(std::string* serverpubkey) {
  if (serverpubkey != nullptr) {
    
  } else {
    
  }
  serverpubkey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serverpubkey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ConnectionResp.serverPubKey)
}
inline std::string* ConnectionResp::unsafe_arena_release_serverpubkey() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ConnectionResp.serverPubKey)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return serverpubkey_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ConnectionResp::unsafe_arena_set_allocated_serverpubkey(
    std::string* serverpubkey) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (serverpubkey != nullptr) {
    
  } else {
    
  }
  serverpubkey_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      serverpubkey, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ConnectionResp.serverPubKey)
}

// int32 portNumber = 3;
inline void ConnectionResp::clear_portnumber() {
  portnumber_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConnectionResp::_internal_portnumber() const {
  return portnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConnectionResp::portnumber() const {
  // @@protoc_insertion_point(field_get:ConnectionResp.portNumber)
  return _internal_portnumber();
}
inline void ConnectionResp::_internal_set_portnumber(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  portnumber_ = value;
}
inline void ConnectionResp::set_portnumber(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_portnumber(value);
  // @@protoc_insertion_point(field_set:ConnectionResp.portNumber)
}

// string serverIPAddr = 4;
inline void ConnectionResp::clear_serveripaddr() {
  serveripaddr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConnectionResp::serveripaddr() const {
  // @@protoc_insertion_point(field_get:ConnectionResp.serverIPAddr)
  return _internal_serveripaddr();
}
inline void ConnectionResp::set_serveripaddr(const std::string& value) {
  _internal_set_serveripaddr(value);
  // @@protoc_insertion_point(field_set:ConnectionResp.serverIPAddr)
}
inline std::string* ConnectionResp::mutable_serveripaddr() {
  // @@protoc_insertion_point(field_mutable:ConnectionResp.serverIPAddr)
  return _internal_mutable_serveripaddr();
}
inline const std::string& ConnectionResp::_internal_serveripaddr() const {
  return serveripaddr_.Get();
}
inline void ConnectionResp::_internal_set_serveripaddr(const std::string& value) {
  
  serveripaddr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConnectionResp::set_serveripaddr(std::string&& value) {
  
  serveripaddr_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ConnectionResp.serverIPAddr)
}
inline void ConnectionResp::set_serveripaddr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serveripaddr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ConnectionResp.serverIPAddr)
}
inline void ConnectionResp::set_serveripaddr(const char* value,
    size_t size) {
  
  serveripaddr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ConnectionResp.serverIPAddr)
}
inline std::string* ConnectionResp::_internal_mutable_serveripaddr() {
  
  return serveripaddr_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConnectionResp::release_serveripaddr() {
  // @@protoc_insertion_point(field_release:ConnectionResp.serverIPAddr)
  return serveripaddr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConnectionResp::set_allocated_serveripaddr(std::string* serveripaddr) {
  if (serveripaddr != nullptr) {
    
  } else {
    
  }
  serveripaddr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serveripaddr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ConnectionResp.serverIPAddr)
}
inline std::string* ConnectionResp::unsafe_arena_release_serveripaddr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ConnectionResp.serverIPAddr)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return serveripaddr_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ConnectionResp::unsafe_arena_set_allocated_serveripaddr(
    std::string* serveripaddr) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (serveripaddr != nullptr) {
    
  } else {
    
  }
  serveripaddr_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      serveripaddr, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ConnectionResp.serverIPAddr)
}

// bytes certificateFileCrt = 5;
inline void ConnectionResp::clear_certificatefilecrt() {
  certificatefilecrt_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConnectionResp::certificatefilecrt() const {
  // @@protoc_insertion_point(field_get:ConnectionResp.certificateFileCrt)
  return _internal_certificatefilecrt();
}
inline void ConnectionResp::set_certificatefilecrt(const std::string& value) {
  _internal_set_certificatefilecrt(value);
  // @@protoc_insertion_point(field_set:ConnectionResp.certificateFileCrt)
}
inline std::string* ConnectionResp::mutable_certificatefilecrt() {
  // @@protoc_insertion_point(field_mutable:ConnectionResp.certificateFileCrt)
  return _internal_mutable_certificatefilecrt();
}
inline const std::string& ConnectionResp::_internal_certificatefilecrt() const {
  return certificatefilecrt_.Get();
}
inline void ConnectionResp::_internal_set_certificatefilecrt(const std::string& value) {
  
  certificatefilecrt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConnectionResp::set_certificatefilecrt(std::string&& value) {
  
  certificatefilecrt_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ConnectionResp.certificateFileCrt)
}
inline void ConnectionResp::set_certificatefilecrt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  certificatefilecrt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ConnectionResp.certificateFileCrt)
}
inline void ConnectionResp::set_certificatefilecrt(const void* value,
    size_t size) {
  
  certificatefilecrt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ConnectionResp.certificateFileCrt)
}
inline std::string* ConnectionResp::_internal_mutable_certificatefilecrt() {
  
  return certificatefilecrt_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConnectionResp::release_certificatefilecrt() {
  // @@protoc_insertion_point(field_release:ConnectionResp.certificateFileCrt)
  return certificatefilecrt_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConnectionResp::set_allocated_certificatefilecrt(std::string* certificatefilecrt) {
  if (certificatefilecrt != nullptr) {
    
  } else {
    
  }
  certificatefilecrt_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), certificatefilecrt,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ConnectionResp.certificateFileCrt)
}
inline std::string* ConnectionResp::unsafe_arena_release_certificatefilecrt() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ConnectionResp.certificateFileCrt)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return certificatefilecrt_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ConnectionResp::unsafe_arena_set_allocated_certificatefilecrt(
    std::string* certificatefilecrt) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (certificatefilecrt != nullptr) {
    
  } else {
    
  }
  certificatefilecrt_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      certificatefilecrt, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ConnectionResp.certificateFileCrt)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_connection_2eproto
